C51 COMPILER V9.00   LCD12864                                                              04/08/2017 21:09:00 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE LCD12864
OBJECT MODULE PLACED IN LCD12864.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE LCD12864.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          #include "LCD12864.h"
   3          
   4          
   5          /************************************************************************
   6          Function name:       write_cmd 
   7          Descriptions:        向lcd输入指令 
   8          ************************************************************************/
   9          void write_cmd(BYTE cmd)
  10          {   
  11   1              BYTE dl;
  12   1              do {
  13   2                      dl=rd_com;
  14   2                      } while((dl&0x80)!=0);  //判忙 
  15   1          wr_com= cmd;
  16   1          Delay(1);
  17   1      }
  18          
  19          
  20          /**********************************************************************
  21          Function name:       write_data 
  22          Descriptions:        写入数据 
  23          **********************************************************************/
  24          void write_data(BYTE dat)       
  25          {
  26   1              BYTE dl;
  27   1              do {
  28   2                      dl=rd_com;
  29   2                      } while((dl&0x80)!=0);  //判忙 
  30   1          wr_data= dat;  
  31   1          Delay(1);
  32   1      }  
  33          
  34          /***********************************************************************
  35          Function name:       write_string 
  36          Descriptions:        写入字符串 
  37          ***********************************************************************/
  38          void write_string(BYTE *s)                                                                                               
  39          {
  40   1          while(*s != '\0')            //'\0'为字符串结束标志 
  41   1          {
  42   2              write_data(*s);
  43   2              s++;
  44   2          }
  45   1      }
  46          
  47          /**********************************************************************
  48          Function name:       set_display_place
  49          Descriptions:        设置字符的显示位置 
  50          **********************************************************************/
  51          void set_display_place(BYTE line,column)
  52          {
  53   1          BYTE address;
  54   1          if(line == 1)
  55   1          {
C51 COMPILER V9.00   LCD12864                                                              04/08/2017 21:09:00 PAGE 2   

  56   2              address = 0x80 + column;
  57   2          }
  58   1          else if(line == 2)
  59   1          {
  60   2              address = 0x90 + column;
  61   2          }
  62   1          else if(line == 3)
  63   1          {
  64   2              address = 0x88 + column;
  65   2          }
  66   1          else if(line == 4)
  67   1          {
  68   2              address = 0x98 + column;
  69   2          }
  70   1          write_cmd(address);         
  71   1      }
  72          
  73          /*******************************************************************
  74          Function name:       将字符串写到指定的位置 
  75          Descriptions:        将字符串显示在lcd的特定位置 
  76          *******************************************************************/
  77          void write_string_lcd(BYTE line,column,unsigned char *string)
  78          {
  79   1          set_display_place(line,column);
  80   1          write_string(string);
  81   1          Delay(1);
  82   1      }
  83          
  84          /***************************************************
  85          ************液晶模块初始化******************************
  86          ****************************************************/
  87          void lcd_init(void)                               
  88          {
  89   1        write_cmd(0x30);//功能设置，一次送8位数据，基本指令集 
  90   1        write_cmd(0x30);//功能设置，一次送8位数据，基本指令集 
  91   1        write_cmd(0x0C);//0000,1100 整体显示，游标off，游标位置off
  92   1        write_cmd(0x01);//0000,0001 清DDRAM 
  93   1        write_cmd(0x06);//02
  94   1      }
  95          
  96          /*****************设置数据显示位置********************/
  97          /****数值显示0―65535,column为数字起始位置:0,1,2...****/
  98          void seti_wl(BYTE line,column) 
  99          {
 100   1              BYTE dli;
 101   1              dli=column%2;
 102   1              column/=2;
 103   1              set_display_place(line,column);
 104   1              if (dli==1)
 105   1              {
 106   2                      dli=0x20;
 107   2                      write_data(dli);        
 108   2              }
 109   1      }
 110          
 111          /***************************************************
 112          ************显示长整型数据***************************
 113          ****************************************************/
 114          void crti(unsigned long dat) 
 115          {
 116   1              BYTE dhi,dli,ddi,dei;
 117   1              unsigned long datah;
C51 COMPILER V9.00   LCD12864                                                              04/08/2017 21:09:00 PAGE 3   

 118   1              unsigned long datal;
 119   1              datah=dat;
 120   1              dhi=0;
 121   1              if (datah>=10)
 122   1              {
 123   2                      do
 124   2                      {               
 125   3                              datah/=10;
 126   3                              dhi++;
 127   3                      }while(datah>=10);
 128   2                      datah=dat;
 129   2                      ddi=dhi;
 130   2                      for (dli=0;dli<dhi;dli++)
 131   2                      {
 132   3                              datal=1;
 133   3                              for (dei=0;dei<ddi;dei++)
 134   3                              {
 135   4                                      datal*=10;
 136   4                              }
 137   3                              datah=dat/datal;
 138   3                              dat=dat%datal;
 139   3                              datah+=0x30;
 140   3                              write_data(datah);
 141   3                              ddi--;
 142   3                      }
 143   2                      dat+=0x30;
 144   2                      write_data(dat);
 145   2              }
 146   1              else
 147   1              {
 148   2                      dat=dat+0x30;
 149   2                      write_data(dat);
 150   2              }
 151   1      }
 152           
 153          /***************************************************
 154          ************浮点数显示******************************
 155          ****************************************************/
 156          void crt_r(float x,unsigned char N)
 157          {
 158   1               BYTE dli;
 159   1           unsigned int  dath;
 160   1               unsigned int  datl;
 161   1               unsigned int  dat;
 162   1               
 163   1               if (x<0.0)
 164   1               {
 165   2                      dat=0x2d;
 166   2                      write_data(dat);
 167   2                      Delay(1);
 168   2                      x=fabs(x);
 169   2               }
 170   1           dath=(int)x;       
 171   1           crti(dath);
 172   1           if (N>0)
 173   1           {
 174   2                dat=0x2e;
 175   2                write_data(dat);
 176   2                        Delay(1);
 177   2                        dat=1;
 178   2                for (dli=0;dli<N;dli++)
 179   2                        {
C51 COMPILER V9.00   LCD12864                                                              04/08/2017 21:09:00 PAGE 4   

 180   3                              dat*=10;
 181   3                        }
 182   2                        dath=(int)(x*dat)-dath*dat;
 183   2                        for (dli=1;dli<N;dli++)
 184   2                        {
 185   3                              dat /= 10;
 186   3                              datl=dath/dat;
 187   3                              datl += 0x30;
 188   3                              write_data(datl);
 189   3                              dath %= dat;
 190   3                        }
 191   2                        crti(dath);
 192   2           }  
 193   1      }
 194          
 195          
 196          
 197          
 198          
 199          
 200          #ifdef MY_LCD
 201          
 202          
 203          /******************************************************************
 204          Function name:       将字符写到指定的位置 
 205          Descriptions:        将字符串显示在lcd的特定位置 
 206          *******************************************************************/
 207          void write_data_lcd(BYTE line,column,dat)
 208          {
 209   1          set_display_place(line,column);
 210   1          write_data(dat);
 211   1          Delay(1);
 212   1      }
 213          
 214          
 215          /*********************************************************
 216          *粗略的延时函数--暂时没用到
 217          **********************************************************/
 218          static void lcd_delay(WORD x)
 219          {
 220   1      
 221   1          WORD y;
 222   1      
 223   1          for(;x>0;x--)
 224   1      
 225   1              for(y=110;y>0;y--);
 226   1      
 227   1      }
 228          
 229          /*********************************************************
 230          *画图清屏，由于LCD的清屏指令0X01不能作用在绘图中，
 231          *所以只能自己写清屏子程序
 232          **********************************************************/
 233          
 234          void clear_lcd(void)
 235          {    
 236   1      
 237   1          BYTE i,j;
 238   1          write_cmd(0x34);
 239   1          for(i=0;i<32;i++)             //因为LCD有纵坐标32格所以写三十二次
 240   1          {
 241   2              write_cmd(0x80+i);         //先写入纵坐标Y的值
C51 COMPILER V9.00   LCD12864                                                              04/08/2017 21:09:00 PAGE 5   

 242   2              write_cmd(0x80);         //再写入横坐标X的值
 243   2              for(j=0;j<32;j++)         //横坐标有16位，每位写入两个字节的的数据，也就写入32次
 244   2              {                         //因为当写入两个字节之后横坐标会自动加1，所以就不用再次写入地址了。
 245   3                  write_data(0x00);    
 246   3              }
 247   2          }
 248   1          write_cmd(0x36);
 249   1          write_cmd(0x30);
 250   1      }
 251          #endif
 252          
 253          
 254          
 255          
 256          
 257          /*********************************************************
 258          *初始化LCD的画图功能
 259          **********************************************************/
 260          void lcd_init_draw(void)
 261          {
 262   1              //write_cmd(0x34);//写指令函数，扩充指令集，绘图关
 263   1          //write_cmd(0x36);//8位数据传输，扩展指令操作，绘图开 
 264   1      #if 1    
 265   1                   
 266   1          write_cmd(0x3E);//8位数据传输，扩展指令操作，绘图开             
 267   1          write_cmd(0x01);//清屏 
 268   1      #else
                      write_cmd(0x34);
                  write_cmd(0x36);
                 
              #endif
 273   1      }
 274          
 275          
 276          /*********************************************************
 277          *读取LCD某个地址的数据
 278          **********************************************************/
 279          BYTE read_data(void)
 280          {
 281   1              BYTE dl;
 282   1              BYTE res;
 283   1              do {
 284   2                      dl=rd_com;
 285   2                      } while((dl&0x80)!=0);  //判忙 
 286   1          res = rd_data;  
 287   1          Delay(1);
 288   1              return res;
 289   1      }
 290          
 291          /*
 292          
 293          写入一个点的子程序。具体步骤是：计算出X轴、Y轴的地址、X轴中的第几位，
 294          然后读出该地址现在的值，因为一般写入新的点的时候，会覆盖掉16个点中其他点，
 295          当你要同时显示16个点中的两个点的时候就会冲突，所以先将显示中的点读出来，
 296          然后在或上要点亮的点，这样就可以同时点亮。注意读取数据的时候读取的第一个数据不要，
 297          从第二数据开始取，也就是说要读取三次，只取后面两次的值。
 298          还有就是读取数据之前要先写入你要读取数据的地址，读取数据之后的写入数据还要从新写入地址。
 299          最后就是输入数据地址，先输入Y轴，再输入X轴，输入数据。
 300          
 301          */
 302          void DrawDots(BYTE x,BYTE y)//打点函数   //x，y为128*64 点阵的坐标
 303          {
C51 COMPILER V9.00   LCD12864                                                              04/08/2017 21:09:00 PAGE 6   

 304   1      
 305   1              WORD bt=0,read=0;
 306   1          BYTE x_adr,y_adr,h_bit,l_bit;
 307   1      
 308   1              y_adr=0x80+y%32;//计算Y轴的地址，应为纵坐标有64个，所有对32求余，当Y大于31时，Y的坐标是下半屏的。
 309   1      
 310   1              if(y>31) //计算X轴的地址当Y大于31时X的地址在下半屏，从0X88开始，小于31时X的地址是在上半屏，从0X80开始
 311   1              x_adr=0x88+x/16;        
 312   1          else
 313   1              x_adr=0x80+x/16;
 314   1      
 315   1              bt=0x8000>>(x%16); //求这个点到底是在哪个点
 316   1      
 317   1              write_cmd(0x34);
 318   1          write_cmd(0x36);
 319   1          write_cmd(y_adr);     //读取数据的时候要先写入所取数据的地址
 320   1          write_cmd(x_adr);
 321   1      
 322   1              read_data();         //读取的第一个字节不要
 323   1      
 324   1              read=read_data();     //从第二个字节开始接收。
 325   1          read<<=8;
 326   1          read|=read_data();
 327   1          bt=bt|read;
 328   1          h_bit=bt>>8;
 329   1          l_bit=bt;
 330   1      
 331   1              write_cmd(y_adr);     //写入点的时候，重新写入地址，因为地址已经改变。
 332   1          write_cmd(x_adr);
 333   1          write_data(h_bit);
 334   1          write_data(l_bit);
 335   1      
 336   1              write_cmd(0x36); //开显示
 337   1          write_cmd(0x30);     //转回基本指令集   
 338   1      }
 339          
 340          /*********************************************************
 341          *将指定的坐标点亮或者熄灭或者变暗
 342          **********************************************************/
 343          void DrawDots2(BYTE x,BYTE y,BYTE color)//打点函数   //x，y为128*64 点阵的坐标
 344          {
 345   1           BYTE row,xlabel,xlabel_bit; 
 346   1           BYTE Read_H=0,Read_L=0;  
 347   1           write_cmd(0x34);       //扩充指令 
 348   1           write_cmd(0x36);       //绘图指令 
 349   1           xlabel=x>>4;            //确定水平坐标地址
 350   1           xlabel_bit=x & 0x0F; // 细分水平坐标中的第几位
 351   1           
 352   1               if(y<32) 
 353   1                      row=y;
 354   1           else{
 355   2                  row=y-32;
 356   2                      xlabel+=8;      
 357   2               } 
 358   1           write_cmd(row+0x80);
 359   1           write_cmd(xlabel+0x80);
 360   1           read_data();
 361   1           Read_H=read_data();
 362   1           Read_L=read_data();   
 363   1           write_cmd(row+0x80);
 364   1           write_cmd(xlabel+0x80);   //水平坐标地址+基址=显示的水平地址   
 365   1           if(xlabel_bit<8) 
C51 COMPILER V9.00   LCD12864                                                              04/08/2017 21:09:00 PAGE 7   

 366   1           {
 367   2                switch(color)
 368   2               {
 369   3                   case 0:Read_H &=(~(0x01<<(7-xlabel_bit))); break; //变暗 ，看不见
 370   3                   case 1:Read_H |=(0x01<<(7-xlabel_bit)); break; //变亮  ，看得见
 371   3                   case 2:Read_H ^=(0x01<<(7-xlabel_bit)); break; //反转
 372   3                   default:break;
 373   3                } 
 374   2               write_data(Read_H);
 375   2               write_data(Read_L); 
 376   2           } 
 377   1           else 
 378   1           {
 379   2                switch(color)
 380   2                {
 381   3                     case 0:Read_L &=(~(0x01<<(15-xlabel_bit))); break; //变暗    ，看不见 
 382   3                     case 1:Read_L |=(0x01<<(15-xlabel_bit)); break; //变亮  ，看得见
 383   3                     case 2:Read_L ^=(0x01<<(15-xlabel_bit)); break; //反转 
 384   3                     default:break;
 385   3                } 
 386   2                write_data(Read_H);
 387   2                write_data(Read_L);
 388   2           } 
 389   1           write_cmd(0x30);//恢复正常模式  
 390   1      }
 391          
 392          
 393          /*********************************************************
 394          *画XY坐标轴
 395          **********************************************************/
 396          void ShowXY(void)
 397          {
 398   1              BYTE i = 0;
 399   1              
 400   1          for(i=0;i<62;i++) //画出Y轴
 401   1          {
 402   2              DrawDots(2,i);
 403   2          }
 404   1      
 405   1          for(i=2;i<128;i++) //画出X轴
 406   1          {
 407   2              DrawDots(i,61);
 408   2          }
 409   1              for(i = 0;i < 2;i++)//画箭头
 410   1              {
 411   2                       DrawDots(126-i,60-i);
 412   2                       DrawDots(3+i,1+i);
 413   2      
 414   2                       DrawDots(126-i,62+i);
 415   2                       DrawDots(1-i,1+i);
 416   2              }
 417   1      }
 418          extern WORD new_temprature[BUF_LEN];
 419          extern WORD old_temprature[BUF_LEN];
 420          
 421          
 422          /*********************************************************
 423          *在指定的X处开始画柱状图，
 424          width表示宽度，
 425          var表示柱状图要表示的数值
 426          base表示基准值--纵坐标为零对应的温度值--目前采用上电开机以后第一次读取到的温度减1作为基准值
 427          precision表示纵坐标每一格代表的温度值的100倍（单片机处理浮点数很慢--扩大一百倍变为正数处理）
C51 COMPILER V9.00   LCD12864                                                              04/08/2017 21:09:00 PAGE 8   

 428                           这里用宏定义为5，原温度值就是（5/100=0.05度），也就是纵坐标每一格代表0.05度
 429                           所以，对于60个纵坐标格子最多能表示的温度变化范围是3度。
 430          **********************************************************/
 431          void ShowScaleLine(BYTE x,BYTE width,WORD var,WORD base,WORD precision)
 432          {
 433   1         BYTE i = 0,j = 0;
 434   1         BYTE height = (var - base)/precision;
 435   1         for(j = 0; j < height;j++)
 436   1         {
 437   2                 for(i = 0;i < width;i++)
 438   2                 {
 439   3                              DrawDots(x+i,60-j);
 440   3                 }
 441   2         }
 442   1      }
 443          
 444          extern WORD g_base;
 445          
 446          /*********************************************************
 447          *更新柱状图--利用修改增量的方式更新柱状图
 448          *柱状图高度 = （当前温度值 - 基准值）/ 精度值
 449          *当前温度值：就是最新采集到的历史数据
 450          *基准值：（第一次上电以后获得的温度值 - 1）对应的浮点数 x 100变为整数
 451          **********************************************************/
 452          void UpdateScaleLine()
 453          {
 454   1      
 455   1              BYTE i = 0,j = 0,k=0;
 456   1              BYTE x = 0,y = 0;
 457   1              
 458   1              BYTE new_h = 0;
 459   1              BYTE old_h = 0;
 460   1      
 461   1              for(i = 0;i < BUF_LEN;i++) //循环BUF_LEN，每次更新一条柱状--共有BUF_LEN个历史数据
 462   1              {
 463   2                      if(new_temprature[i] == 0)//新采集的温度为0--表示还没有采集到对应的历史数据（刚刚开机不久）
 464   2                              continue;
 465   2                      if(new_temprature[i] > g_base)//由于g_base是上电以后的（第一个温度值-1），所以在短时间内，新采集到的数据
             -都会大于这个值
 466   2                              new_h = (new_temprature[i] - g_base)/SCALE_LINE_PRECISION;
 467   2                      else
 468   2                              new_h = 0;      //如果新采集的温度小于基准值--就将新的高度设置为0
 469   2      
 470   2                      if(new_h > 61)  //如果新采集的数据对应的高度超过纵坐标能支持的最大高度，强制设置为最大高度61
 471   2                              new_h = 61;
 472   2      
 473   2                      if(old_temprature[i] > g_base)//参考前面的注释
 474   2                              old_h = (old_temprature[i] - g_base)/SCALE_LINE_PRECISION;
 475   2                      else 
 476   2                              old_h = 0;
 477   2      
 478   2                      if(old_h > 61)
 479   2                              old_h = 61;
 480   2                      
 481   2                      if(new_h == old_h)//两次高度相等
 482   2                              continue;
 483   2                      else if(new_h > old_h) //新高度较高--表示需要在当前的基础上增加一段高度
 484   2                      {
 485   3                              x = SCALE_LINE_START_X + (i * SCALE_LINE_INCSIZE);//旧柱状图的左上顶点的X坐标
 486   3                              y = 61 - old_h; //旧柱状图的左上顶点的Y坐标
 487   3                              for(k = 0;k < (new_h - old_h);k++)
 488   3                               {
C51 COMPILER V9.00   LCD12864                                                              04/08/2017 21:09:00 PAGE 9   

 489   4                                       for(j = 0;j < SCALE_LINE_WIDTH;j++)
 490   4                                       {
 491   5                                               DrawDots2(x+j,y-1-k,1); //Y坐标需要在旧坐标的基础上再往上跳一格开始增加指定高度
 492   5                                       }
 493   4                               }
 494   3                              
 495   3                      }
 496   2                      else if (new_h < old_h)//新高度较矮--表示需要在当前的基础上减去一段高度
 497   2                      {
 498   3                              x = SCALE_LINE_START_X + (i * SCALE_LINE_INCSIZE);
 499   3                              y = 61 - old_h;
 500   3                              for(k = 0;k < (old_h - new_h);k++)
 501   3                               {
 502   4                                       for(j = 0;j < SCALE_LINE_WIDTH;j++)
 503   4                                       {
 504   5                                               DrawDots2(x+j,y+k,0); //Y坐标在旧坐标的基础上直接减少指定高度
 505   5                                       }
 506   4                               }
 507   3                      }
 508   2              }
 509   1      
 510   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2492    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      77
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
